q()
install.packages('rmarkdown')
install.package('yaml')
install.packages('yaml')
install.packages('yaml')
install.packages("yaml")
install.packages("rlang")
install.packages("rmarkdown")
install.packages("tinytex")
tinytex::install_tinytex()
?qnorm
?qt
?qf
?qchisq
?qnorm
pnorm(-2.5)
.4432-.0228
pnorm(1.5) - pnorm(-2)
.5+.4432
.9432-.0228
pnorm(1.5)
.9332 - .0228
1 - pnorm(2.3)
qt(0.05, 80, lower.tail = FALSE)
qt(0.025, 80, lower.tail = FALSE)
qt(0.01, 80, lower.tail = FALSE)
qt(0.005, 80, lower.tail = FALSE)
57.8 - 1.664125 * 6.02 / sqrt(81)
57.8 + 1.664125 * 6.02 / sqrt(81)
57.8 - 1.99 * 6.02 / sqrt(81)
57.8 + 1.99 * 6.02 / sqrt(81)
57.8 - 2.374 * 6.02 / sqrt(81)
57.8 + 2.374 * 6.02 / sqrt(81)
57.8 - 2.639 * 6.02 / sqrt(81)
57.8 + 2.639 * 6.02 / sqrt(81)
57.8 + qt(0.01, 80, lower.tail = FALSE) * 6.01 / sqrt(81)
(15.7665 - 16)/(.1524 / sqrt(6))
7+4+6+7+5+4=9
7+4+6+7+5+4+9
42/7
1+4+1+1+4+9
20/6
20/5
(6 - 3.5) / (2 / sqrt(6))
?t.test
?stdev
?st
?sd
1+4+1+1+4+9
/6
20/6
sqrt(3.333)
(6 - 3.5)/(1.826 / sqrt(7))
B = matrix(c(1, 4, 2, 5, 3, 6))
B
B = matrix(c(1, 4, 2, 5, 3, 6), nrow=2)
B
B=matrix(1:6, nrow=2, brrow=TRUE)
B=matrix(1:6, nrow=2, byrow=TRUE)
B
t(A)
t(B)
B[2, :]
B[2]
B[2:]
myMean <- function(x) {}
myMean <- function(x) { return sum(x) / len(x) }
myMean <- function(x) { return(sum(x) / len(x)) }
myMean(1:6)
myMean <- function(x) { return(sum(x) / length(x)) }
myMean(1:6)
print(myFactorial(3))
return n * myFactorial(n - 1)
return (n * myFactorial(n - 1))
myFactorial <- function(n) {
if (n == 1) {
return 1
return(1)
if (n == 1) {
return(1)
}
return (x * myFactorial(x - 1))
source("~/.active-rstudio-document", echo=TRUE)
myFactorial <- function(x) {
if (x == 1) {
return(1)
}
return (x * myFactorial(x - 1))
}
print(myFactorial(3))
print(myFactorial(5))
print(myFactorial(5))
myFactorial <- function(n) {
if (n == 1) {
return(1)
}
return (n * myFactorial(n - 1))
}
myFactorial <- function(n) {
if (n == 1) {
return(1)
}
return (n * myFactorial(n - 1))
}
print(myFactorial(10))
myFactorial <- function(n) {
if (n == 0) {
return 1
myFactorial <- function(n) {
if (n == 0) {
return (1)
}
if (n == 1) {
return(1)
}
return (n * myFactorial(n - 1))
}
print(myFactorial(10))
print(myFactorial(0))
myFactorial <- function(n) {
if (n == 0) {
return (1)
}
return (n * myFactorial(n - 1))
}
print(myFactorial(0))
print(myFactorial(10))
knitr::opts_chunk$set(echo = TRUE)
n = length(Price)
knitr::opts_chunk$set(echo = TRUE)
input = read.table("4-10.txt", header = TRUE)
attach(input)
model = lm(Price ~ HomeSize + Rating)
summary(model)
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8))
n = length(Price)
n
qt(0.005, n - 2, lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
input = read.table("4-10.txt", header = TRUE)
attach(input)
model = lm(Price ~ HomeSize + Rating)
summary(model)
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8))
knitr::opts_chunk$set(echo = TRUE)
input = read.table("4-10.txt", header = TRUE)
attach(input)
model = lm(Price ~ HomeSize + Rating)
summary(model)
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8))
n = length(Price)
qt(0.005, n - 2, lower.tail = FALSE)
qt(0.005, n - 2, lower.tail = FALSE)
4.8914 * 3.355387
?confint
confint(model, level=0.99)
29.348 - 16.413
29.3468-16.41254
29.3468 - 4.8914*3.355387
29.3468 - qt(0.005, n - 3, lower.tail = FALSE) * 4.8914
qt(0.005, n - 3, lower.tail = FALSE) * 4.8914
0.2285 * qt(0.005, n - 3, lower.tail = FALSE)
qt(0.005, n - 3, lower.tail = FALSE)
0.4332 * 3.499
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8))
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8), interval = "confidence")
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8), interval = "prediction")
qt(0.025, n - 3, lower.tail = FALSE)
qt(0.005, n - 3, lower.tail = FALSE)
3.499483/ 2.364624
175.9918 - 172.2783
175.9918 - 168.5648
3.7135 * 1.479932
172.2783 + 5.496
172.2783 - 5.496
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8), interval = "confidence", level=0.99)
180.7957 - 172.2783
172.2783 - 8.5174 * 1.480
172.2783 + 8.5174 * 1.480
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8), interval = "confidence", level=0.99)
predict(model, newdata = data.frame(HomeSize = 20, Rating = 8), interval = "prediction", level=0.99)
knitr::opts_chunk$set(echo = TRUE)
x0 = matrix(c(1, 5, 10, 15, 20), nrow = 5)
xo
x0
XXinv = matrix(c(0.1, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.5), nrow=5)
Xinv
XXinv
x0 = matrix(c(1, 5, 10, 15, 20), nrow = 5)
Xy = matrix(c(5000, 1000, 750, 2000, 500), nrow=5)
XXinv = matrix(c(0.1, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.5), nrow=5)
x0 = matrix(c(1, 5, 10, 15, 20), nrow = 5)
Xy = matrix(c(5000, 1000, 750, 2000, 500), nrow=5)
XXinv = matrix(c(0.1, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.5), nrow=5)
answer_a = XXinv %*% Xy
answer_b = t(x0) %*% XXinv
answer_c = t(x0) %*% XXinv %*% x0
print(answer_a)
print(answer_b)
print(answer_c)
?source
source("../mattotex.R")
source("../mattotex.R")
source("../mattotex.R")
source("../mattotex.R")
source("../mattotex.R")
myMat = matrix(c(400:212), nrow=21)
matrixToTex(myMat)
source("../mattotex.R")
myMat = matrix(c(400:212), nrow=21)
matrixToTex(myMat)
source("../mattotex.R")
myMat = matrix(c(400:212), nrow=21)
matrixToTex(myMat)
print(matrixToTex(myMat))
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
?paste
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mattotex.R")
myMat = matrix(c(1:4), nrow=2)
print(matrixToTex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2, ncol=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(c(1:4), nrow=2)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(400:212, nrow=2, byrow=TRUE)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(400:212, nrow=2, byrow=TRUE)
print(mat2tex(myMat))
source("../mat2tex.R")
myMat = matrix(400:212, nrow=2, byrow=TRUE)
print(mat2tex(myMat))
setwd("~/Documents/GitHub/Fantasy-BBall-Analysis")
input = read.csv("randle.csv", header = TRUE)
attach(input)
?qqnorm
qqnorm(PTS)
qqline(PTS)
FPTS = PTS + AST + ORB + DRB + 3 * (BLK + STL) - TOV
qqnorm(FPTS)
qqline(FPTS)
input = read.csv("randle.csv", header = TRUE)
attach(input)
qqplot(PTS)
qqnorm(PTS)
qqline(PTS)
FPTS = PTS + AST + ORB + DRB + 3 * (BLK + STL)
qqnorm(FPTS)
qqline(FPTS)
hist(FPTS)
